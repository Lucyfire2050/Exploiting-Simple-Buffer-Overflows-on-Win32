Stack

Function Prologue
push  ebp         ; Save the stack-frame base pointer (of the calling function).
mov   ebp, esp    ; Set the stack-frame base pointer to be the current location on the stack.
sub   esp, N      ; Grow the stack by N bytes to reserve space for local variables

Function Epilogue
mov   esp, ebp    ; Put the stack pointer back where it was when this function was called.
pop   ebp         ; Restore the calling function's stack frame.
ret               ; Return to the calling function.

Main -> F1

Winding
<Local Variables + Others>
Frame Pointer - EBP for Main
Return Address in Main
Argument to Function1

Unwinding
After LEAVE
Return Address
Argument to Function1

After RET
Argument to Function1

Main -> F1 -> F2 -> F3

Winding
<Local Variables + Others>
Frame Pointer - EBP for Function2
Return Address in Function2
Argument to Function3
<Local Variables + Others>
Frame Pointer - EBP for Function1
Return Address in Function1
Argument to Function2
<Local Variables + Others>
Frame Pointer - EBP for Main
Return Address in main()
Argument to Function1

Unwinding
Step 1
<Local Variables + Others>
Frame Pointer - EBP for Function2
Return Address in Function2
Argument to Function3
<Local Variables + Others>
Frame Pointer - EBP for Function1
Return Address in Function1
Argument to Function2
<Local Variables + Others>
Frame Pointer - EBP for Main
Return Address in main()
Argument to Function1

After LEAVE
Return Address in Function2
Argument to Function3
<Local Variables + Others>
Frame Pointer - EBP for Function1
Return Address in Function1
Argument to Function2
<Local Variables + Others>
Frame Pointer - EBP for Main
Return Address in main()
Argument to Function1

After RET
Argument to Function3
<Local Variables + Others>
Frame Pointer - EBP for Function1
Return Address in Function1
Argument to Function2
<Local Variables + Others>
Frame Pointer - EBP for Main
Return Address in main()
Argument to Function1

Step 2
After LEAVE
Return Address in Function1
Argument to Function2
<Local Variables + Others>
Frame Pointer - EBP for Main
Return Address in main()
Argument to Function1

After RET
Argument to Function2
<Local Variables + Others>
Frame Pointer - EBP for Main
Return Address in main()
Argument to Function1

Step 3
After LEAVE
Return Address in main()
Argument to Function1

After RET
Argument to Function1

Altering Execution
Program crashes after we modify control flow as there is an invalid return address on the stack
To Fix this
Make it execute the exit process routine in kernel32.dll
Search for -> Name in module -> ExitProcess
Modify the invalid return address with the address of the exit process routine in kernel32.dll

Execute Shellcode
The shellcode is in the source of the program
Locate the first 4 bytes of the shellcode in the hex dump
Modify the return address to this.

Direction of overwrite is reverse to the direction of the growth of the stack

+---------------------+  Low Memory
| Local Vars + Others |      ^
+---------------------+      |
| EBP                 |      |
+---------------------+      |
| Return Address      |      |
+---------------------+      |
| 0x11111111          |      |
+---------------------+  High Memory

gets(buffer)
+---------------+   Low Memory
| AAAAAAAAAAAAA |       |
+---------------+       |
|   AAAAAAAA    |       |
+---------------+       |
|   AAAAAAAA    |       |
+---------------+       |
|   AAAAAAAA    |       |
+---------------+       |
|   AAAAAAAA    |       V
+---------------+   High Memory
